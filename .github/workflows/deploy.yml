name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: |
          npm run deploy:dev
          
      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          npm run deploy:prod

      - name: Upload static files to S3
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name spoon-streaming-app-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} --query 'Stacks[0].Outputs[?OutputKey==`UploadBucketName`].OutputValue' --output text)
          aws s3 sync ./out s3://$BUCKET_NAME/ --delete

      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name spoon-streaming-app-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
